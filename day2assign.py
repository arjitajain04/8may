# -*- coding: utf-8 -*-
"""Day2Assign.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pdT67HFwHWH1CFqoGzvSh_hGHqNos2Uj
"""

#ques1)
def generate_n_chars(n, c):
    result = ""
    for _ in range(n):
        result += c
    return result
print(generate_n_chars(5, "x"))

#ques2)
def max_in_list(n):
    if not n:
        return
    maxnum=n[0]
    for num in n:
        if num>maxnum:
            maxnum=num
    return maxnum
n = [10, 5, 8, 20, 15,22,90,56,99]
print(max_in_list(n))

#ques3)
def wordlen(words):
    return [len(w) for w in words]
wlist = ["apple","arjita","regex","python"]
print(wordlen(wlist))

#ques4)
def find_longest_word(words):
    if not words:
        return 0
    maxlen = len(words[0])
    for w in words:
        if len(w) > maxlen:
            maxlen= len(w)
    return maxlen
word_list = ["apple","arjita","regex","python"]
print(find_longest_word(word_list))

#ques5)
def filter_long_words(words,n):
    return [w for w in words if len(w)>n]
wlist = ["apple","arjita","regex","python","pineapple"]
print(filter_long_words(wlist,6))

#ques6)
import re
def palindrome(p):
    newphrase = re.sub(r'[^a-zA-Z]', '', p.lower())
    return newphrase == newphrase[::-1]
phrase = ["Go hang a salami I'm a lasagna hog.","Was it a rat I saw?","Step on no pets","Sit on a potato pan, Otis",
    "Lisa Bonet ate no basil",
    "Satan, oscillate my metallic sonatas",
    "I roamed under it as a tired nude Maori",
    "Rise to vote sir",
    "Dammit, I'm mad!"]
for p in phrase:
    print(f'"{p}":is a palindrome')

#ques7)
def pangram(sentence):
    alphabet= set('abcdefghijklmnopqrstuvwxyz')
    new= ''.join(char.lower() for char in sentence if char.isalpha())
    return set(new)==alphabet
sentence = "The quick brown fox jumps over the lazy dog."
print(pangram(sentence))

#ques8)
def translate(english,lexicon):
    return [lexicon.get(w,w) for w in english]
lexicon = {"merry": "god","christmas": "jul","and": "och","happy": "gott","new": "nytt","year": "Ã¥r"}
english= ["merry", "christmas", "and", "happy", "new", "year"]
swedish= translate(english, lexicon)
print(swedish)

#ques9)
def char_freq(string):
    return {char: string.count(char) for char in set(string)}
freq= char_freq("abbabcbdbabdbdbabababcbcbab")
print(freq)



